name: Angular Ci

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]

env:
    REGISTRY_NAME: github.com

jobs:
    build:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [20.x, 22.x]
        steps:
            - uses: actions/checkout@v4
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              with:
                  path: |
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                      .angular
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-
            - name: Install yarn
              run: npm install -g yarn
            - name: Install package
              run: yarn install --frozen-lockfile --non-interactive
            - name: Lint
              run: yarn lint
            - name: Build
              run: yarn ng build --configuration production
            - name: Build with esbuild
              run: yarn ng run hoteler-web:esbuild || true
            - name: Unit Test
              run: yarn ng test --browsers=ChromeHeadless --watch=false --code-coverage
    build-docker:
        runs-on: ubuntu-latest
        needs: [build]
        steps:
            - uses: actions/checkout@master
            # Container build
            - name: Build docker
              id: build-docker
              run: |
                  docker build . -t ${{ env.REGISTRY_NAME }}/damingerdai/hoteler-web:${{ github.sha }} -f Dockerfile
            - name: Image digest for docker
              run: echo ${{ steps.build-docker.outputs.digest }}
            - name: Save docker image to tar file
              run: |
                  docker save ${{ env.REGISTRY_NAME }}/damingerdai/hoteler-web:${{ github.sha }} -o hoteler-web.tar
                  chmod 664 hoteler-web.tar
            - name: copy file via ssh password
              uses: appleboy/scp-action@v0.1.7
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  source: hoteler-web.tar
                  target: ${{ secrets.SERVER_TARGET_FOLDER_PATHs }}
    deploy:
        runs-on: ${{ matrix.os }}
        needs: [build-docker]
        strategy:
            fail-fast: true
            matrix:
                os: [ubuntu-latest]
        steps:
            - name: deploy by ssh
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USERNAME }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  script: |-
                      cd /root/Workspace/hoteler; \
                      docker load -i hoteler-web.tar; \
                      kubectl set image deployment/hoteler-web hoteler-web=${{ env.REGISTRY_NAME }}/damingerdai/hoteler-web:${{ github.sha }} -n hoteler-namespace \
                      kubectl rollout status deployment/hoteler-web -n hoteler-namespace
